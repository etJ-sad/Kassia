# quick_fix_webui.py
"""
Quick fix script for Kassia WebUI issues
"""

import json
import os
from pathlib import Path
import sys

def fix_translations():
    """Fix JSON translation files by removing comments."""
    print("üîß Fixing translation files...")
    
    # Fix English translations
    en_translations = {
        "search_placeholder": "Search Kassia documentation...",
        "connection_connecting": "üîå Connecting...",
        "connection_connected": "üü¢ Connected",
        "connection_disconnected": "üî¥ Disconnected",
        "connection_reconnecting": "üîÑ Reconnecting",
        "nav_dashboard": "Dashboard",
        "nav_build": "New Build",
        "nav_assets": "Assets",
        "nav_jobs": "Jobs",
        "nav_admin": "Admin",
        "hero_subtitle": "Windows Image Preparation System",
        "hero_description": "Advanced automation platform for Windows image customization and deployment. Built with enterprise-grade reliability and Siemens engineering excellence.",
        "hero_cta": "Start Building",
        "dashboard_system_overview": "System Overview",
        "stats_total_jobs": "Total Jobs",
        "stats_running": "Running",
        "stats_completed": "Completed",
        "stats_failed": "Failed",
        "active_job_title": "Active Job",
        "job_label": "Job:",
        "status_label": "Status:",
        "progress_label": "Progress:",
        "step_label": "Step:",
        "waiting_job_updates": "Waiting for job updates...",
        "recent_jobs_title": "Recent Jobs",
        "no_jobs_yet": "No jobs yet. Start a new build to see activity here.",
        "build_create_new": "Create New Build",
        "build_device_config": "Device Configuration",
        "build_operating_system": "Operating System",
        "select_device": "Select device...",
        "select_os": "Select OS...",
        "skip_drivers": "Skip driver integration",
        "skip_updates": "Skip update integration",
        "build_preview": "Build Preview",
        "device_label": "Device:",
        "os_label": "OS:",
        "wim_path_label": "WIM Path:",
        "sbi_label": "SBI:",
        "drivers_label": "Drivers:",
        "updates_label": "Updates:",
        "start_build": "Start Build",
        "asset_management": "Asset Management",
        "device_filter": "Device Filter",
        "os_filter": "OS Filter",
        "all_devices": "All Devices",
        "all_os": "All OS",
        "refresh": "Refresh",
        "select_device_os_assets": "Select device and OS to view available assets",
        "build_jobs": "Build Jobs",
        "no_build_jobs": "No build jobs found. Start your first build to see it here.",
        "admin_database": "Database Management",
        "admin_statistics": "Job Statistics",
        "db_jobs_stored": "Jobs Stored",
        "db_logs_stored": "Log Entries",
        "db_size": "Database Size",
        "db_events": "System Events",
        "db_maintenance": "Database Maintenance",
        "db_maintenance_desc": "Clean up old data and optimize database performance.",
        "cleanup_days": "Days to keep:",
        "cleanup_now": "Cleanup Now",
        "update_stats": "Update Stats",
        "db_backup": "Database Backup",
        "db_backup_desc": "Download a copy of the database for backup purposes.",
        "db_location": "Database Location:",
        "download_backup": "Download Backup",
        "loading_statistics": "Loading statistics...",
        "loading": "Loading...",
        "loading_assets": "Loading assets...",
        "starting_build": "Starting build...",
        "application_ready": "Kassia WebUI ready",
        "build_started": "Build started successfully!",
        "build_completed": "Build completed successfully!",
        "build_failed": "Build failed",
        "job_cancelled": "Job cancelled successfully",
        "error_network": "Network connection error",
        "error_server": "Server error - please try again",
        "error_loading_devices": "Failed to load devices",
        "error_loading_assets": "Failed to load assets",
        "error_loading_jobs": "Failed to load jobs",
        "validation_device_required": "Device selection is required",
        "validation_os_required": "Operating system selection is required",
        "confirm_cancel_job": "Are you sure you want to cancel this job?"
    }
    
    # Create translations directory
    translations_dir = Path("web/translations")
    translations_dir.mkdir(parents=True, exist_ok=True)
    
    # Write English translations
    with open(translations_dir / "en.json", 'w', encoding='utf-8') as f:
        json.dump(en_translations, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Fixed English translations")

def create_minimal_template():
    """Create a minimal working template."""
    print("üîß Creating minimal template...")
    
    templates_dir = Path("web/templates")
    templates_dir.mkdir(parents=True, exist_ok=True)
    
    minimal_template = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kassia WebUI</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 10px; 
            padding: 20px; 
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .header { 
            text-align: center; 
            margin-bottom: 30px; 
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
        }
        .status { 
            padding: 10px; 
            border-radius: 5px; 
            margin-bottom: 20px; 
        }
        .status.success { background: #d4edda; color: #155724; }
        .status.error { background: #f8d7da; color: #721c24; }
        .btn { 
            background: #007bff; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            cursor: pointer; 
            margin: 5px;
        }
        .btn:hover { background: #0056b3; }
        #status { margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Kassia WebUI</h1>
            <p>Windows Image Preparation System</p>
        </div>
        
        <div id="status" class="status success">
            ‚úÖ WebUI is running successfully!
        </div>
        
        <div>
            <h3>Quick Tests</h3>
            <button class="btn" onclick="testAPI()">Test API</button>
            <button class="btn" onclick="testWebSocket()">Test WebSocket</button>
            <button class="btn" onclick="testDevices()">Test Device Loading</button>
        </div>
        
        <div id="results" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
            <h4>Test Results:</h4>
            <div id="test-output">Click buttons above to run tests...</div>
        </div>
    </div>

    <script>
        function log(message) {
            const output = document.getElementById('test-output');
            output.innerHTML += '<div>' + new Date().toLocaleTimeString() + ': ' + message + '</div>';
        }
        
        async function testAPI() {
            try {
                const response = await fetch('/api/health');
                const data = await response.json();
                log('‚úÖ API Test: ' + JSON.stringify(data));
            } catch (error) {
                log('‚ùå API Test failed: ' + error.message);
            }
        }
        
        function testWebSocket() {
            try {
                const ws = new WebSocket('ws://localhost:8000/ws');
                ws.onopen = () => log('‚úÖ WebSocket connected');
                ws.onerror = (error) => log('‚ùå WebSocket error: ' + error.message);
                ws.onclose = () => log('üîå WebSocket closed');
                setTimeout(() => ws.close(), 2000);
            } catch (error) {
                log('‚ùå WebSocket test failed: ' + error.message);
            }
        }
        
        async function testDevices() {
            try {
                const response = await fetch('/api/devices');
                const devices = await response.json();
                log('‚úÖ Devices loaded: ' + devices.length + ' devices found');
                devices.forEach(device => {
                    log('  üì± ' + device.device_id + ' (OS: ' + device.supported_os.join(', ') + ')');
                });
            } catch (error) {
                log('‚ùå Device loading failed: ' + error.message);
            }
        }
        
        // Auto-test on load
        window.onload = function() {
            log('üöÄ WebUI loaded successfully');
            setTimeout(testAPI, 1000);
        };
    </script>
</body>
</html>'''
    
    with open(templates_dir / "index.html", 'w', encoding='utf-8') as f:
        f.write(minimal_template)
    
    print("‚úÖ Created minimal template")

def create_test_app():
    """Create a minimal test FastAPI app."""
    print("üîß Creating test app...")
    
    test_app_content = '''# test_webui_simple.py
"""
Minimal Kassia WebUI for testing
"""

from fastapi import FastAPI, Request
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from pathlib import Path
import sys

# Add parent to path
sys.path.insert(0, str(Path(__file__).parent.parent))

app = FastAPI(title="Kassia WebUI Test", version="2.0.0")
templates = Jinja2Templates(directory="web/templates")

@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    """Main dashboard page."""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/api/health")
async def health_check():
    """Health check endpoint."""
    return {
        "status": "healthy", 
        "message": "Kassia WebUI Test is running",
        "version": "2.0.0"
    }

@app.get("/api/devices")
async def list_devices():
    """Mock device list."""
    return [
        {"device_id": "xX-39A", "supported_os": [10, 21656]},
        {"device_id": "xX-32A", "supported_os": [10, 21656]}
    ]

if __name__ == "__main__":
    import uvicorn
    print("üåê Starting Kassia WebUI Test...")
    print("üìä Dashboard: http://localhost:8000")
    print("üìã API Health: http://localhost:8000/api/health")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=False)
'''
    
    with open("test_webui_simple.py", 'w', encoding='utf-8') as f:
        f.write(test_app_content)
    
    print("‚úÖ Created test app: test_webui_simple.py")

def check_dependencies():
    """Check if required dependencies are installed."""
    print("üîç Checking dependencies...")
    
    required_modules = [
        'fastapi',
        'jinja2', 
        'uvicorn',
        'websockets',
        'pydantic'
    ]
    
    missing = []
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module}")
            missing.append(module)
    
    if missing:
        print(f"\nüì¶ Install missing modules:")
        print(f"pip install {' '.join(missing)}")
        return False
    
    return True

def create_directories():
    """Create required directories."""
    print("üìÅ Creating directories...")
    
    directories = [
        "web/templates",
        "web/static/js",
        "web/static/css",
        "web/translations",
        "runtime/data",
        "runtime/logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ {directory}")

def main():
    """Main fix function."""
    print("üöÄ Kassia WebUI Quick Fix")
    print("=" * 40)
    
    # Check current directory
    if not Path("web").exists():
        print("‚ùå Please run this script from the Python/ directory")
        print("   Current directory should contain: web/, app/, config/")
        return
    
    try:
        # Check dependencies first
        if not check_dependencies():
            print("\n‚ö†Ô∏è  Please install missing dependencies first!")
            return
        
        # Create directories
        create_directories()
        
        # Fix translation files
        fix_translations()
        
        # Create minimal template
        create_minimal_template()
        
        # Create test app
        create_test_app()
        
        print("\n" + "=" * 40)
        print("‚úÖ Quick fixes applied!")
        print("\nüß™ Test the WebUI:")
        print("1. Run test app: python test_webui_simple.py")
        print("2. Open browser: http://localhost:8000")
        print("3. If test works, try full WebUI: python start_webui.py")
        print("\nüîç If issues persist:")
        print("- Check console output for specific errors")
        print("- Ensure running as Administrator")
        print("- Try different port: python start_webui.py --port 8001")
        
    except Exception as e:
        print(f"\n‚ùå Quick fix failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()